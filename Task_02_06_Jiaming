import rasterio.mask
from shapely.geometry import Point, Polygon
import shapefile
import numpy as np
import rasterio


class ReadIslandFromShp:
    def __init__(self, shpfilepath):
        self.__filepath = shpfilepath

    def get_island_polygon(self):
        # Read shape file
        sf = shapefile.Reader(self.__filepath)
        feature = sf.shapeRecords()[0]
        first = feature.__geo_interface__
        points = first["geometry"]["coordinates"][3][0]
        # create island vector polygon
        island = Polygon(points)
        return island


class Elevation:

    def __init__(self, elefilepath, point):
        self.__point = point
        self.__filepath = elefilepath
        with open(self.__filepath, "r") as elefile:
            self.__lines = elefile.readlines()

    def get_ncols(self):
        line0 = self.__lines[0].strip().split(" ")
        return int(line0[1])

    def get_nrows(self):
        line1 = self.__lines[1].strip().split(" ")
        return int(line1[1])

    def get_xllcorner(self):
        line2 = self.__lines[2].strip().split(" ")
        return int(line2[1])

    def get_yllcorner(self):
        line3 = self.__lines[3].strip().split(" ")
        return int(line3[1])

    def get_cellsize(self):
        line4 = self.__lines[4].strip().split(" ")
        return int(line4[1])

    def get_elevation(self):
        self.__eledata = np.zeros((self.get_nrows(), self.get_ncols()))
        row = 0
        for line in self.__lines[5:]:
            eachline = line.strip().split(" ")
            for col in range(0, self.get_ncols()):
                self.__eledata[row, col] = float(eachline[col])
            row = row + 1
        return self.__eledata

    def get_max_point(self, area):
        features = [area.__geo_interface__]
        with rasterio.open(self.__filepath) as scr:
            out_image, out_transform = rasterio.mask.mask(scr, features, crop=False)
            area_ele = out_image.reshape(out_image.shape[1], out_image.shape[2])
        a = np.where(area_ele == np.max(area_ele))
        shortest=10000
        for m in range(0, len(a[0])):
            xr = a[0][m]
            yr = a[1][m]
            xo = self.get_cellsize() * yr + self.get_cellsize() / 2 + self.get_xllcorner()
            yo = self.get_nrows() * self.get_cellsize() - (
                        self.get_cellsize() * xr + self.get_cellsize() / 2) + self.get_yllcorner()
            xu = self.__point.x
            yu = self.__point.y
            distance = np.sqrt((xu - xo) ** 2 + (yu - yo) ** 2)
            if distance < shortest:
                shortest = distance
                hpoint = Point(xo, yo)
        return hpoint


def main():
    user_point = Point(input_coords.e, input_coords.n)
    island = ReadIslandFromShp("Material/shape/isle_of_wight.shp").get_island_polygon()
    shparea = user_point.buffer(5000).intersection(island)
    highest_point = Elevation("Material/elevation/SZ.asc", user_point).get_max_point(shparea)
    print(highest_point)


if __name__ == "__main__":
    main()
